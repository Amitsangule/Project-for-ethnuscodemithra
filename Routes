const express = require('express');
const router = express.Router();
const axios = require('axios');
const Transaction = require('../models/Transaction');

// Initialize the database with seed data
router.get('/initialize', async (req, res) => {
    try {
        const response = await axios.get('https://s3.amazonaws.com/roxiler.com/product_transaction.json');
        const transactions = response.data;
        await Transaction.deleteMany({});
        await Transaction.insertMany(transactions);
        res.status(200).send('Database initialized successfully');
    } catch (error) {
        res.status(500).send('Error initializing database');
    }
});

// List all transactions with search and pagination
router.get('/transactions', async (req, res) => {
    const { page = 1, perPage = 10, search = '', month } = req.query;
    const query = {
        dateOfSale: { $regex: new RegExp(`^${month}`, 'i') },
        $or: [
            { title: { $regex: search, $options: 'i' } },
            { description: { $regex: search, $options: 'i' } },
            { price: { $regex: search, $options: 'i' } }
        ]
    };
    try {
        const transactions = await Transaction.find(query)
            .skip((page - 1) * perPage)
            .limit(parseInt(perPage));
        res.status(200).json(transactions);
    } catch (error) {
        res.status(500).send('Error fetching transactions');
    }
});

// Statistics for the selected month
router.get('/statistics', async (req, res) => {
    const { month } = req.query;
    try {
        const totalSaleAmount = await Transaction.aggregate([
            { $match: { dateOfSale: { $regex: new RegExp(`^${month}`, 'i') } } },
            { $group: { _id: null, total: { $sum: "$price" } } }
        ]);

        const totalSoldItems = await Transaction.countDocuments({
            dateOfSale: { $regex: new RegExp(`^${month}`, 'i') },
            isSold: true
        });

        const totalNotSoldItems = await Transaction.countDocuments({
            dateOfSale: { $regex: new RegExp(`^${month}`, 'i') },
            isSold: false
        });

        res.status(200).json({
            totalSaleAmount: totalSaleAmount[0]?.total || 0,
            totalSoldItems,
            totalNotSoldItems
        });
    } catch (error) {
        res.status(500).send('Error fetching statistics');
    }
});

// Bar chart data
router.get('/barchart', async (req, res) => {
    const { month } = req.query;
    const priceRanges = [
        { range: '0-100', min: 0, max: 100 },
        { range: '101-200', min: 101, max: 200 },
        { range: '201-300', min: 201, max: 300 },
        { range: '301-400', min: 301, max: 400 },
        { range: '401-500', min: 401, max: 500 },
        { range: '501-600', min: 501, max: 600 },
        { range: '601-700', min: 601, max: 700 },
        { range: '701-800', min: 701, max: 800 },
        { range: '801-900', min: 801, max: 900 },
        { range: '901-above', min: 901, max: Infinity }
    ];

    try {
        const data = await Promise.all(priceRanges.map(async (range) => {
            const count = await Transaction.countDocuments({
                dateOfSale: { $regex: new RegExp(`^${month}`, 'i') },
                price: { $gte: range.min, $lt: range.max }
            });
            return { range: range.range, count };
        }));
        res.status(200).json(data);
    } catch (error) {
        res.status(500).send('Error fetching bar chart data');
    }
});

// Pie chart data
router.get('/piechart', async (req, res) => {
    const { month } = req.query;
    try {
        const data = await Transaction.aggregate([
            { $match: { dateOfSale: { $regex: new RegExp(`^${month}`, 'i') } } },
            { $group: { _id: "$category", count: { $sum: 1 } } }
        ]);
        res.status(200).json(data);
    } catch (error) {
        res.status(500).send('Error fetching pie chart data');
    }
});

// Combined data from all APIs
router.get('/combined', async (req, res) => {
    const { month } = req.query;
    try {
        const transactions = await Transaction.find({ dateOfSale: { $regex: new RegExp(`^${month}`, 'i') } });
        const totalSaleAmount = await Transaction.aggregate([
            { $match: { dateOfSale: { $regex: new RegExp(`^${month}`, 'i') } } },
            { $group: { _id: null, total: { $sum: "$price" } } }
        ]);

        const totalSoldItems = await Transaction.countDocuments({
            dateOfSale: { $regex: new RegExp(`^${month}`, 'i') },
            isSold: true
        });

        const totalNotSoldItems = await Transaction.countDocuments({
            dateOfSale: { $regex: new RegExp(`^${month}`, 'i') },
            isSold: false
        });

        const barChartData = await Promise.all(priceRanges.map(async (range) => {
            const count = await Transaction.countDocuments({
                dateOfSale: { $regex: new RegExp(`^${month}`, 'i') },
                price: { $gte: range.min, $lt: range.max }
            });
            return { range: range.range, count };
        }));

        const pieChartData = await Transaction.aggregate([
            { $match: { dateOfSale: { $regex: new RegExp(`^${month}`, 'i') } } },
            { $group: { _id: "$category", count: { $sum: 1 } } }
        ]);

        res.status(200).json({
            transactions,
            statistics: {
                totalSaleAmount: totalSaleAmount[0]?.total || 0,
                totalSoldItems,
                totalNotSoldItems
            },
            barChartData,
            pieChartData
        });
    } catch (error) {
        res.status(500).send('Error fetching combined data');
    }
});

module.exports = router;
